//This is the Combo.h part of my class.

#include "Food.h"

#ifndef COMBO_H
#define COMBO_H

using namespace std;

class Combo
{
    public:
        Combo();
        Combo(float, float, int, vector<Food>);
        ~Combo();

        float getCost();
        float getPrice();
        int getComboSize();
        void setCost(float cost);
        void setPrice(float price);
        void setComboSize(int comboSize);
        void calculatePrice();
        void calculateCost();
        int searchForFood(Food food);
        void addFood(Food food);
        void removeFood(Food food);

    private:
        vector<Food> m_listOfFoods;
        int m_comboSize;
        float m_price;
        float m_cost;
};

#endif // COMBO_H

//This is the Combo.cpp part of my class.

#include "Combo.h"


Combo::Combo(): m_price(0), m_cost(0), m_comboSize(0) { }


Combo::~Combo()
{

}


Combo::Combo(float price, float cost, int comboSize, vector<Food> listOfFoods):
m_price(price), m_cost(cost) , m_listOfFoods(listOfFoods)
 {
    if (comboSize >= 0 &&
        comboSize <= 3)
        m_comboSize = comboSize;
    else
        m_comboSize = 0;
 }

float Combo::getPrice()
{
    return m_price;
}

float Combo::getCost()
{
    return m_cost;
}

void Combo::setPrice(float price)
{
    if (price < 0)
        m_price = 0;
    else
        m_price = price;
}

void Combo::setCost(float cost)
{
    if (cost < 0)
        m_cost = 0;
    else
        m_cost = cost;
}

void Combo::setComboSize(int comboSize)
{
    if (comboSize >= 0 && comboSize <= 3)
        m_comboSize = comboSize;
    else
        m_comboSize = 0;
}

void Combo::calculateCost()
{
    float res = 0;
    for (int i = 0; i < m_listOfFoods.size(); i++)
    {
        res += m_listOfFoods[i].getCost();
    }
    m_cost = res;
}

void Combo::calculatePrice()
{
    float res = 0;
    for (int i = 0; i < m_listOfFoods.size(); i++)
    {
        res += m_listOfFoods[i].getPrice();
    }
    m_price = res;
}

int Combo::searchForFood(Food food)
{
    string name = food.getName();
    for (unsigned int i = 0; i < m_listOfFoods.size(); ++i)
	{
		if (m_listOfFoods[i].getName() == name)
			return i;
	}
	return -1;
}

void Combo::addFood(Food food)
{
    m_listOfFoods.push_back(food);
}

void Combo::removeFood(Food food)
{
    int res = searchForFood(food);
    if (res > -1)
    {
        m_listOfFoods.erase(m_listOfFoods.begin() + res);
    }
}

int Combo::getComboSize()
{
	return m_comboSize;
}


